static int UserPrompt(float *WireSpeedSetting, float *NominalDropletTime, float *HomeOffset){

	float CNCSpeed = 0.0;
	char RunType;
	float CNCRelatedToWireSpeed[] = { 5.2, 5.4, 5.6, 5.8, 6, 6.2, 6.4 };
	float NominalDroplets[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9};
	int a = 0;
	printf("Would you like to run the program or would you like to re-calibrate the machine? \n Please input R for Run, or C for Calibrate:");
	scanf_s("%c", &RunType);
	
	if(RunType == R || RunType == r){
		printf("Please input your CNC Speed, Note speed must be between 3 in/s and 6.7 in/s:\n ");
		scanf_s("%f", &CNCSpeed);
		while (CNCSpeed < MINCNCSETTING || CNCSpeed > MAXCNCSETTING){
			printf("Error. The CNC speed you have entered is outside the valid range.\n");
			Sleep(1000);
			printf("Please input your CNC Speed, Note speed must be between 3 in/s and 6.7 in/s:\n ");
			scanf_s("%f", &CNCSpeed);

		}
		printf("CNC speed is valid, setting up the system now.\n");
		a = (int)((CNCSpeed * 10) - 30);

		*WireSpeedSetting = CNCRelatedToWireSpeed[a];
		*NominalDropletTime = NominalDroplets[a];
	}
	if(RunType == C || RunType == c){
		printf("please disconnect the Welder Ground Connection before continuing.\n");
		#ifndef _LINUX	
		printf("\nPress any key to continue to Continue ...\n\n");
		while (!_kbhit());
		_getch();
		#endif
		printf("Re-Calibrating, please wait.\n");
		CalibrateWireSpeed();
		HomeOffset = new "home" wire speed;
		
	}
}

static int WireSpeed(uint brd, *WireSpeed){

	float rad = .975;															//radius of wheel attached to the encoder in inches
	int tmax = 1000000;											// max interval time in microseconds, this will wait until event edge event is detected
	uint val = 0;
	uint timestamp, reason;
	uint chan = 0;

	S826_CounterSnapshotRead(brd, chan, &val, &timestamp, &reason, tmax); //Obtain a snapshot of what the counts buffer has after tmax time

	double pi = 3.1415;
	float numerator = val * pi * rad;									// calculate the numerator value for linear velocity
	int fullrotation = 500;												// nuber of counts in a full rotation of the encoder
	float lin = numerator / fullrotation;									// calculates the linear velocity of wirefeed in inches/second
	*WireSpeed = lin;
	printf("Wire Feed = %.2f in/sec\t\n", lin);									// display the current linear velocity, should update every second.
}

static int HomeWireSpeed(uint brd){
	uint counter = 5;
	uint direction[2] = { DIRECTIONMASK, 0 };
	uint PulsePin[2] = { PULSEMASK, 0 };
	uint pinstate[2] = { WIRESPEEDHOMEMASK, 0 };

	S826_DioOutputWrite(brd, pinstate, 1);

	S826_DioInputRead(brd, pinstate);
	pinstate[0] &= WIRESPEEDHOMEMASK;
	S826_DioOutputSourceWrite(brd, PulsePin);

	if (pinstate[0] != WIRESPEEDHOMEMASK){
		S826_DioOutputWrite(brd, direction, 1);
		S826_DioOutputWrite(brd, direction, 2);
		PwmGeneratorStart(brd, counter, 5000, 5000);
		while (pinstate[0] != WIRESPEEDHOMEMASK){
			S826_DioInputRead(brd, pinstate);
			pinstate[0] &= WIRESPEEDHOMEMASK;
		}
		PwmGeneratorStop(brd, counter);
	}
	
}

static int CalibrateWireSpeed(uint brd, *HomeOffset ){
	int i = 0;
	float WireSpeed;
	float AvgWireSpeed = 0;
	uint WeldOn[2] = {G1ACTIVE, 0};
	
	HomeWireSpeed(brd);
	
	S826_DioOutputWrite(brd, WeldOn, 1);
	S826_DioOutputWrite(brd, WeldOn, 2);
	
	
	Sleep(250);
	for (i = 0; i <10; i++){
	WireSpeed(brd, &WireSpeed);
	AvgWireSpeed = AvgWireSpeed + WireSpeed;
	}
	
	S826_DioOutputWrite(brd, WeldOn, 1);
	*HomeOffset = AvgWireSpeed / 10;
	
	
}

static int main(void){
		
		float HomeOffset = 0.0;
	

}